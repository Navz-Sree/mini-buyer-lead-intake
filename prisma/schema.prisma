// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Buyers owned by this user
  buyers        Buyer[]
  buyerHistory  BuyerHistory[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum City {
  CHANDIGARH
  MOHALI
  ZIRAKPUR
  PANCHKULA
  OTHER
}

enum PropertyType {
  APARTMENT
  INDEPENDENT_HOUSE
  VILLA
  PLOT
  COMMERCIAL
}

enum Status {
  NEW
  CONTACTED
  INTERESTED
  NOT_INTERESTED
  CONVERTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadSource {
  WEBSITE
  SOCIAL_MEDIA
  REFERRAL
  ADVERTISEMENT
  COLD_CALL
  EMAIL_CAMPAIGN
  TRADE_SHOW
  OTHER
}

enum PossessionTimeline {
  IMMEDIATE
  WITHIN_3_MONTHS
  WITHIN_6_MONTHS
  WITHIN_1_YEAR
  AFTER_1_YEAR
}

model Buyer {
  id                    String              @id @default(cuid())
  fullName              String              @db.VarChar(100)
  email                 String?             @db.VarChar(255)
  phone                 String              @db.VarChar(20)
  city                  City
  propertyType          PropertyType
  budgetMin             Int?
  budgetMax             Int?
  bhkRequirement        String?             @db.VarChar(50)
  possessionTimeline    PossessionTimeline
  specificRequirements  String?             @db.Text
  leadSource            LeadSource
  status                Status              @default(NEW)
  priority              Priority            @default(MEDIUM)
  notes                 String?             @db.Text
  ownerId               String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  owner                 User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  history               BuyerHistory[]
  
  // Indexes for better query performance
  @@index([ownerId])
  @@index([status])
  @@index([priority])
  @@index([city])
  @@index([propertyType])
  @@index([leadSource])
  @@index([possessionTimeline])
  @@index([updatedAt])
  @@index([fullName])
  @@index([phone])
  @@index([email])
  
  @@map("buyers")
}

model BuyerHistory {
  id        String   @id @default(cuid())
  buyerId   String
  changedBy String
  changedAt DateTime @default(now())
  action    String   // e.g., "created", "updated status", "updated budget"
  changes   String?  // Human-readable description of changes
  
  // Relations
  buyer     Buyer @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  user      User  @relation(fields: [changedBy], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([buyerId])
  @@index([changedAt])
  
  @@map("buyer_history")
}
